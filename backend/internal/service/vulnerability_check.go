package service

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

type Vulnerability struct {
	ID          string   `json:"id"`
	Title       string   `json:"title"`
	Description string   `json:"description"`
	CVSS        float64  `json:"cvss"`
	References  []string `json:"references"`
	CPEs        []string `json:"cpes"`
}

// 改进漏洞检查
func (s *PortScanService) checkVulnerabilities(service, version string) []string {
	var vulns []string

	// 检查本地漏洞库
	localVulns := s.checkLocalVulnerabilities(service, version)
	vulns = append(vulns, localVulns...)

	// 检查NVD数据库
	nvdVulns := s.checkNVDVulnerabilities(service, version)
	vulns = append(vulns, nvdVulns...)

	// 检查Exploit-DB
	exploits := s.checkExploitDB(service, version)
	vulns = append(vulns, exploits...)

	return vulns
}

// 检查本地漏洞库
func (s *PortScanService) checkLocalVulnerabilities(service, version string) []string {
	var vulns []string
	
	// 从数据库查询漏洞信息
	rows, err := s.db.Raw(`
		SELECT v.id, v.title, v.cvss 
		FROM vulnerabilities v 
		JOIN vulnerability_affects va ON v.id = va.vulnerability_id
		WHERE va.service = ? AND va.version_pattern LIKE ?
	`, service, "%"+version+"%").Rows()
	
	if err != nil {
		return vulns
	}
	defer rows.Close()

	for rows.Next() {
		var id, title string
		var cvss float64
		if err := rows.Scan(&id, &title, &cvss); err != nil {
			continue
		}
		vulns = append(vulns, fmt.Sprintf("%s: %s (CVSS: %.1f)", id, title, cvss))
	}

	return vulns
}

// 检查NVD数据库
func (s *PortScanService) checkNVDVulnerabilities(service, version string) []string {
	var vulns []string

	// 构建CPE
	cpe := fmt.Sprintf("cpe:2.3:a:%s:%s:%s:*:*:*:*:*:*:*",
		strings.ReplaceAll(strings.ToLower(service), " ", "_"),
		strings.ReplaceAll(strings.ToLower(service), " ", "_"),
		version)

	// 调用NVD API
	url := fmt.Sprintf("https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=%s", cpe)
	resp, err := http.Get(url)
	if err != nil {
		return vulns
	}
	defer resp.Body.Close()

	// 解析响应
	var result struct {
		Vulnerabilities []struct {
			CVE struct {
				ID          string  `json:"id"`
				Description string  `json:"description"`
				CVSS       float64 `json:"baseScore"`
			} `json:"cve"`
		} `json:"vulnerabilities"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return vulns
	}

	for _, vuln := range result.Vulnerabilities {
		vulns = append(vulns, fmt.Sprintf("%s: %s (CVSS: %.1f)",
			vuln.CVE.ID, vuln.CVE.Description, vuln.CVE.CVSS))
	}

	return vulns
}

// 检查Exploit-DB
func (s *PortScanService) checkExploitDB(service, version string) []string {
	var vulns []string

	// 调用Exploit-DB API
	url := fmt.Sprintf("https://www.exploit-db.com/search?q=%s+%s&type=text", service, version)
	resp, err := http.Get(url)
	if err != nil {
		return vulns
	}
	defer resp.Body.Close()

	// 解析响应
	var result struct {
		Exploits []struct {
			ID          int    `json:"id"`
			Title       string `json:"title"`
			Description string `json:"description"`
			Type        string `json:"type"`
			Platform    string `json:"platform"`
		} `json:"exploits"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return vulns
	}

	for _, exploit := range result.Exploits {
		vulns = append(vulns, fmt.Sprintf("EDB-ID:%d: %s (%s)",
			exploit.ID, exploit.Title, exploit.Type))
	}

	return vulns
} 