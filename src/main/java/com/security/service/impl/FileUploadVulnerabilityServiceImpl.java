package com.security.service.impl;
import com.security.service.FileUploadVulnerabilityService;
import com.security.service.processor.ScanResultProcessor;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
public class FileUploadVulnerabilityServiceImpl implements FileUploadVulnerabilityService {
    @Override
    public ScanResultProcessor testFileUpload(String url) {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            // 创建HttpPost对象
            HttpPost httpPost = new HttpPost(url);

            // 构建多部分实体，包含要上传的文件
            HttpEntity entity = MultipartEntityBuilder.create()
                    .addBinaryBody("file", "test.php".getBytes(), null, "test.php")
                    .build();

            httpPost.setEntity(entity);

            // 发送请求
            HttpResponse response = httpClient.execute(httpPost);

            // 获取响应状态码
            int statusCode = response.getStatusLine().getStatusCode();

            // 读取响应内容
            String responseContent = EntityUtils.toString(response.getEntity());

            // 检查响应内容是否包含特定内容，例如上传成功的提示信息
            if (statusCode == 200 && responseContent.contains("Upload successful")) {
                // 检查上传的文件是否可以被访问
                String uploadedFileUrl = url + "/test.php";
                HttpResponse fileResponse = httpClient.execute(new HttpPost(uploadedFileUrl));
                int fileStatusCode = fileResponse.getStatusLine().getStatusCode();

                if (fileStatusCode == 200) {
                    return new ScanResultProcessor(true, "文件上传漏洞存在，上传的文件可以被访问。");
                } else {
                    return new ScanResultProcessor(false, "文件上传成功，但上传的文件无法被访问。");
                }
            } else {
                return new ScanResultProcessor(false, "文件上传失败，响应内容：" + responseContent);
            }
        } catch (Exception e) {
            return new ScanResultProcessor(false, "文件上传测试失败：" + e.getMessage());
        }
    }
    /*
    * public static void main(String[] args) {
        FileUploadVulnerabilityService fileUploadVulnerabilityService = new FileUploadVulnerabilityServiceImpl();

        // 示例URL
        String testUrl = "http://example.com/upload.php";

        // 测试文件上传漏洞
        ScanResult scanResult = fileUploadVulnerabilityService.testFileUpload(testUrl);
        System.out.println(scanResult);
    }
    */
}
